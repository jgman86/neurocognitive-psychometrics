stim_colors_clean$class <- as.factor(stim_colors$class)
stim_colors_clean
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean<-cbind(stim_colors_rgb_clean,color_class)
stim_colors_clean$class <- as.factor(stim_colors$class)
stim_colors_clean$class <- as.factor(stim_colors_rgb_clean$class)
stim_colors_clean %>% group_by(class) %>% count()
stim_colors_clean
stim_colors_rgb_clean %>% group_by(class) %>% count()
stim_colors_rgb_clean
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean %>% group_by(class) %>% count()
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean$class <- as.factor(stim_colors_rgb_clean$class)
stim_colors_clean
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean
stim_colors_clean <- stim_colors[-c(30,7,8,15,6,23)]
# creates a pie chart colors
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
stim_colors<-Polychrome::createPalette(n_samples,range = c(10,90),seedcolors = baseline_colors, M = 50000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
stim_colors_clean <- stim_colors[-c(30,7,8,15,6,23)]
# creates a pie chart colors
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
color_class <- as.matrix(c("Red","Green","Blue","Purple","Red","Green","Yellow","Blue",
"Red","Red","Purple",
"Yellow","Blue","Green","Green","Blue","Purple",
"Purple","Blue","Purple","Green","Red","Red","Yellow"))
colnames(color_class) <- c("class")
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean$class <- as.factor(stim_colors_rgb_clean$class)
# no. of baseline colors in the palette
n_color <- 4
n_samples <- 30
# applying the rainbow function
baseline_colors <- rainbow(n_color)
# prints the hex color codes
baseline_colors
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
# Create Colors and Check for Distinctiveness (> 40) and Luminance
stim_colors<-Polychrome::createPalette(n_samples,range = c(10,90),seedcolors = baseline_colors, M = 50000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
stim_colors_clean <- stim_colors[-c(30,7,8,15,6,23)]
# creates a pie chart colors
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
stim_colors<-Polychrome::createPalette(n_samples,range = c(10,90),seedcolors = baseline_colors, M = 10000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
stim_colors<-Polychrome::createPalette(n_samples,range = c(10,90),seedcolors = baseline_colors, M = 100000,prefix = "SC_")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
n_color <- 4
n_samples <- 50
# applying the rainbow function
baseline_colors <- rainbow(n_color)
# prints the hex color codes
baseline_colors
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
# Create Colors and Check for Distinctiveness (> 40) and Luminance
stim_colors<-Polychrome::createPalette(n_samples,range = c(10,90),seedcolors = baseline_colors, M = 100000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
stim_colors_clean <- stim_colors[-c(23,41,7,29)]
# creates a pie chart colors
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
stim_colors_clean <- stim_colors_clean[-c(32,10,37,29)]
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
stim_colors_clean <- stim_colors_clean[-c(14,6)]
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
# Convert to double RGB Values for Matlab
stim_colors_rgb_clean <- hex2RGB(stim_colors_clean)
stim_colors_rgb_clean
Polychrome::getLUV(stim_colors_clean)
Polychrome::glasbey.colors(n=22)
sortByLuminance(stim_colors_clean)
sorted<-sortByLuminance(stim_colors_clean)
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = sorted,
main = "Baseline Colors")
sorted
# creates a pie chart colors
pie(rep(1, n_samples), col = sorted,
main = "Stim Colors")
stim_colors_rgb_clean
stim_colors_clean %>% group_by(class) %>% count()
library(paletter)
library(here)
library(colordistance)
library(tidyverse)
library(Polychrome)
library(colorspace)
library(pavo)
# Classify Colors According to family
color_class <- as.matrix(c("Red","Green","Blue","Purple","Red","Green","Yellow","Blue",
"Red","Red","Purple",
"Yellow","Blue","Green","Green","Blue","Purple",
"Purple","Blue","Purple","Green","Red","Red","Yellow"))
colnames(color_class) <- c("class")
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean$class <- as.factor(stim_colors_rgb_clean$class)
stim_colors_clean %>% group_by(class) %>% count()
stim_colors_clean
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean
stim_colors_clean<-cbind(stim_colors_clean,color_class)
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
# no. of baseline colors in the palette
n_color <- 4
n_samples <- 50
# applying the rainbow function
baseline_colors <- rainbow(n_color)
# prints the hex color codes
baseline_colors
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = sorted,
main = "Baseline Colors")
sorted<-sortByLuminance(stim_colors_clean)
# Create Colors and Check for Distinctiveness (> 40) and Luminance
stim_colors<-Polychrome::createPalette(n_samples,range = c(10,90),seedcolors = baseline_colors, M = 100000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = sorted,
main = "Stim Colors")
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,90),seedcolors = baseline_colors, M = 50000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,75),seedcolors = baseline_colors, M = 50000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,75),seedcolors = baseline_colors, M = 100000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
pie(rep(1, n_color), col = sorted,
main = "Baseline Colors")
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 100000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 1000000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
n_color <- 4
n_samples <- 40
# applying the rainbow function
baseline_colors <- rainbow(n_color)
# prints the hex color codes
baseline_colors
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
sorted<-sortByLuminance(stim_colors_clean)
# Create Colors and Check for Distinctiveness (> 40) and Luminance
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 1000000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
n_color <- 1
n_samples <- 10
# applying the rainbow function
baseline_colors <- rainbow(n_color)
# prints the hex color codes
baseline_colors
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
sorted<-sortByLuminance(stim_colors_clean)
# Create Colors and Check for Distinctiveness (> 40) and Luminance
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 1000000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
n_samples <- 20
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 1000000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
n_color <- 2
n_samples <- 20
# applying the rainbow function
baseline_colors <- rainbow(n_color)
# prints the hex color codes
baseline_colors
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
sorted<-sortByLuminance(stim_colors_clean)
# Create Colors and Check for Distinctiveness (> 40) and Luminance
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 1000000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
n_color <- 4
n_samples <- 30
# applying the rainbow function
baseline_colors <- c("red","green","blue","yellow")
# prints the hex color codes
baseline_colors
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 1000000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# no. of baseline colors in the palette
n_color <- 3
n_samples <- 30
# applying the rainbow function
baseline_colors <- rainbow(n_color)
# prints the hex color codes
baseline_colors
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 1000000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
# no. of baseline colors in the palette
n_color <- 4
n_samples <- 30
# applying the rainbow function
baseline_colors <- rainbow(n_color)
# prints the hex color codes
baseline_colors
# creates a pie chart of baseline colours
pie(rep(1, n_color), col = baseline_colors,
main = "Baseline Colors")
sorted<-sortByLuminance(stim_colors_clean)
# Create Colors and Check for Distinctiveness (> 40) and Luminance
stim_colors<-Polychrome::createPalette(n_samples,range = c(30,70),seedcolors = baseline_colors, M = 100000,prefix = "SC_")
luminance(stim_colors,main = "Luminance Distribution of Stims")
Polychrome::computeDistances(stim_colors)
plotDistances(stim_colors)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
# Select Colors
stim_colors_clean <- stim_colors[-c(9,15,25)]
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
pie(Polychrome::palette36.colors(30))
Polychrome::palette36.colors(30)
pie(col=Polychrome::palette36.colors(30))
pie(rep(1,30),
col=Polychrome::palette36.colors(30))
col=Polychrome::palette36.colors(36)
pie(rep(1,30),
col=Polychrome::palette36.colors(36))
pie(rep(1,36),
col=Polychrome::palette36.colors(36))
stim_colors <- Polychrome::palette36.colors(36)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
# Select Colors
stim_colors_clean <- stim_colors[-c(1,2)]
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
stim_colors_rgb_clean <- hex2RGB(stim_colors_clean)
color_class <- c("Red","Purple","Green","Blue","Yellow","Red","Green","Green","Blue","Purple","Purple","Yellow","Blue","Red","Green","Green",
"Purple","Yellow","Green","Red","Purple","Yellow","Purple","Purple","Green","Blue","Red","Green","Green","Green","Purple","Purple",
"Blue","Blue")
colnames(color_class) <- c("class")
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean$class <- as.factor(stim_colors_rgb_clean$class)
stim_colors_clean %>% group_by(class) %>% count()
stim_colors_clean
stim_colors_clean %>% group_by(class) %>% count()
stim_colors_clean %>% group_by(color_class) %>% count()
stim_colors_clean
sRGBtoLin<-function(colorChannel) {
# Send this function a decimal sRGB gamma encoded color value
# between 0.0 and 1.0, and it returns a linearized value.
if ( colorChannel <= 0.04045 ) {
return(colorChannel / 12.92)
} else {
return(((colorChannel + 0.055)/1.055)^2.4)
}
}
stim_colors_clean <- stim_colors_clean %>% mutate(across(.cols = c(R,G,B), list(lin=sRGBtoLin)))
linSpace <- function(value)
{
value <- as.vector(value)
if(value <= 0.04045){
value <- value/12.92
} else{
value <- (((value + 0.055)/1.055)^2.4)
}
return(value)
}
stim_colors_clean <- stim_colors_clean %>% mutate(across(.cols = c(R,G,B), list(lin=linSpace())))
stim_colors_clean <- stim_colors_clean %>% mutate(across(.cols = c(R,G,B), list(lin=linSpace))
stim_colors_clean <- stim_colors_clean %>% mutate(across(.cols = c(R,G,B), list(lin=linSpace)))
stim_colors_clean <- stim_colors_clean %>% mutate(across(.cols = c(R,G,B), ~ linSpace))
stim_colors_clean <- stim_colors_clean %>% mutate(across(.cols = R:B, ~ linSpace))
stim_colors_clean
stim_colors_clean <- stim_colors_clean %>% mutate(c_across(.cols = c(R,G,B), ~ linSpace))
stim_colors_clean <- stim_colors_clean %>% mutate(lin= c_across(.cols = c(R,G,B), ~ linSpace))
stim_colors_clean <- stim_colors_clean %>% mutate(lin= linSpace(c_across(.cols = c(R,G,B))
stim_colors_clean <- stim_colors_clean %>% mutate(lin= linSpace(c_across(.cols = c(R,G,B)))
stim_colors_clean <- stim_colors_clean %>% mutate(lin= linSpace(c_across(.cols = c(R,G,B))))
stim_colors_clean <- stim_colors_clean %>% mutate(lin= linSpace(c_across(c(R,G,B))))
linSpace <- function(value)
{
value <- as.vector(value)
if(any(value) <= 0.04045){
value <- value/12.92
} else{
value <- (((value + 0.055)/1.055)^2.4)
}
return(value)
}
stim_colors_clean <- stim_colors_clean %>% mutate(lin= linSpace(c_across(c(R,G,B))))
linSpace <- function(value)
{
ifelse(value <= 0.04045,value/12.92,((value + 0.055)/1.055)^2.4)
return(value)
}
stim_colors_clean <- stim_colors_clean %>% mutate(linSpace=across(.cols=c(R,G,B), list(lin=linSpace)))
stim_colors_clean
linSpace <- function(value)
{
ifelse(value <= 0.04045,value/12.92,((value + 0.055)/1.055)^2.4)
return(value)
}
linspace(c(1,2,3))
linSpace(c(1,2,3))
linSpace(0.1)
linSpace <- function(value)
{
ifelse(value <= 0.04045,value/12.92,
((value + 0.055)/1.055)^2.4)
return(value)
}
linSpace(0.1)
linSpace(c(0.1,0.6))
1 <=2
2 <=2
stim_colors_clean <- stim_colors_clean %>%  mutate_at(.vars = c(R,G,B),
funs(case_when(
. <= 0.04045 ~ ./12.92)))
stim_colors_clean
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean <- stim_colors_clean %>%  mutate_at(.vars = c(R,G,B),
funs(case_when(
. <= 0.04045 ~ ./12.92)))
stim_colors_clean
stim_colors_clean <- stim_colors_clean %>%  mutate_at(.vars = c("R","G","B"),
funs(case_when(
. <= 0.04045 ~ ./12.92)))
stim_colors_clean
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean
linRGB <- stim_colors_clean %>% selecr(R,G,B) %>%  mutate_at(.vars = c(R,G,B),
funs(case_when(
. <= 0.04045 ~ ./12.92,
TRUE ~ ((. + 0.055)/1.055)^2.4)))
linRGB <- stim_colors_clean %>% select(R,G,B) %>%  mutate_at(.vars = c(R,G,B),
funs(case_when(
. <= 0.04045 ~ ./12.92,
TRUE ~ ((. + 0.055)/1.055)^2.4)))
linRGB <- stim_colors_clean %>% select(R,G,B) %>%  mutate_at(.vars = c("R","G","B"),
funs(case_when(
. <= 0.04045 ~ ./12.92,
TRUE ~ ((. + 0.055)/1.055)^2.4)))
linRGB
stim_colors_clean
linRGB <- stim_colors_clean %>% select(R,G,B) %>%  mutate_at(.vars = c("R","G","B"),
funs(case_when(
. <= 0.04045 ~ ./12.92,
TRUE ~ ((. + 0.055)/1.055)^2.4))) %>% mutate(lum_r = R * 0.2126,
lum_g = G *0.7152,
lum_b = B* 0.072)
linRGB
subj_luminance <- stim_colors_clean %>% select(R,G,B) %>%  mutate_at(.vars = c("R","G","B"),
funs(case_when(
. <= 0.04045 ~ ./12.92,
TRUE ~ ((. + 0.055)/1.055)^2.4))) %>% mutate(lum_r = R * 0.2126,
lum_g = G *0.7152,
lum_b = B* 0.072)
subj_luminance <- stim_colors_clean %>% select(R,G,B) %>%  mutate_at(.vars = c("R","G","B"),
funs(case_when(
. <= 0.04045 ~ ./12.92,
TRUE ~ ((. + 0.055)/1.055)^2.4))) %>% mutate(brightness = R * 0.2126 + G *0.7152 + B* 0.072)
subj_luminance
stim_colors
stim_colors_clean
color_class <- c("Red","Purple","Green","Blue","Yellow","Red","Green","Green","Blue","Purple","Purple","Yellow","Blue","Red","Green","Green",
"Purple","Yellow","Green","Red","Purple","Yellow","Purple","Purple","Green","Blue","Red","Green","Green","Green","Purple","Purple",
"Blue","Blue")
colnames(color_class) <- c("class")
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
stim_colors_clean<-cbind(stim_colors_clean,color_class)
stim_colors_clean$class <- as.factor(stim_colors_rgb_clean$class)
stim_colors_clean %>% group_by(color_class) %>% count()
stim_colors_rgb_clean <- cbind(stim_colors_clean,subj_luminance$brightness)
stim_colors_rgb_clean
colnames(stim_colors_rgb_clean) <- c("R","G","B","class","brightness")
stim_colors_rgb_clean
stim_colors_clean <- as.data.frame(stim_colors_rgb_clean@coords)
# Join all data
stim_colors_final<-cbind(stim_colors_clean,subj_luminance$brightness,stim_colors_rgb_clean$class)
stim_colors_final$class <- as.factor(stim_colors_rgb_final$class)
stim_colors_final$class <- as.factor(stim_colors_rgb_final$color_class)
stim_colors_final$class <- as.factor(stim_colors_final$color_class)
colnames(stim_colors_rgb_clean) <- c("R","G","B","class","brightness")
stim_colors_final
colnames(stim_colors_final) <- c("R","G","B","class","brightness")
stim_colors_final
stim_colors_rgb_clean$class
# Join all data
stim_colors_final<-cbind(stim_colors_clean,subj_luminance$brightness,color_class)
stim_colors_final
rm(stim_colors_final)
# Join all data
stim_colors_final<-cbind(stim_colors_clean,subj_luminance$brightness,color_class)
stim_colors_final
stim_colors_clean
rm(stim_colors_final)
# Join all data
stim_colors_final<-cbind(stim_colors_clean,subj_luminance$brightness)
stim_colors_final$class <- as.factor(stim_colors_final$color_class)
colnames(stim_colors_final) <- c("R","G","B","class","brightness")
stim_colors_final
rm(stim_colors_final)
# Join all data
stim_colors_final<-cbind(stim_colors_clean,subj_luminance$brightness)
stim_colors_final
colnames(stim_colors_final) <- c("R","G","B","class","brightness")
stim_colors_final
write.csv2(stim_colors_final,"stim_colors_final.csv")
save.image("C:/Users/Jan/OneDrive - bwstaff/Desktop/neurocognitive-psychometrics/EEG-Preparation/Colors/.RData")
pie(rep(1, nrow(stim_colors_final)), col = stim_colors_final,
main = "Stim Colors")
stim_colors_final
pie(rep(1, nrow(stim_colors_final)), col = stim_colors_final[,1:3],
main = "Stim Colors")
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
pie(rep(1, nrow(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
stim_colors <- Polychrome::palette36.colors(36)
# creates a pie chart colors
pie(rep(1, n_samples), col = stim_colors,
main = "Stim Colors")
# Select Colors
stim_colors_clean <- stim_colors[-c(1,2)]
pie(rep(1, nrow(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
pie(rep(1, length(stim_colors_clean)), col = stim_colors_clean,
main = "Stim Colors")
